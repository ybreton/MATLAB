function RatTrack2(fn, varargin)

% RatTrack

% RatTrack(fn)
% varargin
%    nBaselineFrames = 10;
%    frameRange = []; % list of frames to grab
%    timeRange = 4*60+[35 40]; % start and stop times    
%    threshold = 50;
%    useCores = 1;
%
% uses frameRange first, then timeRange, use frameRange=[], timeRange=[]
% for all frames
%
% ADR 2011/Aug
% YAB 2012/Nov
% based on the VideoReader protocol

nBaselineFrames = 10;
frameRange = []; % list of frames to grab
timeRange = []; % start and stop times
threshold = 50;
samplingRate = 30;
brightenFactor = 6;
ratColor = 158;
getOrientation = true;
debug = false;
useCores = 1;
process_varargin(varargin);
if useCores > 1
    evalin('base',sprintf('matlabpool open %.0f',useCores))
end

disableVideo = false;
disableAudio = true;
trySeeking = false;
useFFGRAB = true;

% frameRange first else timeRange
if ~isempty(frameRange), timeRange = []; end

% gobal parameters
global RatTrackParms
RatTrackParms.debug = debug;
RatTrackParms.getOrientation = getOrientation;
RatTrackParms.nBaselineFrames = nBaselineFrames;
RatTrackParms.threshold = threshold;
RatTrackParms.brightenFactor = brightenFactor;
RatTrackParms.ratColor = ratColor;

global RatTrackData
RatTrackData.fn = fn;
RatTrackData.meanFrame = [];

% if ~isempty(frameRange)
% 	nFrames = length(frameRange)+1;
% elseif ~isempty(timeRange)
% 	nFrames = ceil(diff(timeRange)*samplingRate)+1;
% else
% 	v0 = mmread(fn, 1:10, [], disableVideo, disableAudio, '', trySeeking, useFFGRAB);
% 	nFrames = ceil(v0.totalDuration*samplingRate)+1;
% end

assert(exist(fn, 'file')==2, 'File not found.')

vidObj = VideoReader(fn);

if ~isempty(frameRange)
    nFrames = length(frameRange)+1;
elseif ~isempty(timeRange)
    nFrames = ceil(diff(timeRange)*ceil(get(vidObj,'FrameRate')))+1;
    startFrame = ceil(min(timeRange)*ceil(get(vidObj,'FrameRate')));
    frameRange = startFrame:startFrame+nFrames;
else
    nFrames = ceil(get(vidObj,'Duration')*ceil(get(vidObj,'FrameRate')))+1;
    frameRange = 1:nFrames;
end

% step 1: get mean baseline
disp('Processing mean baseline from first frames...');
% mmread(fn, 1:nBaselineFrames, [], disableVideo, disableAudio, 'RatTrackGetBaseline', trySeeking, useFFGRAB);
mmStruct = vidObj2mmreaderStruct(vidObj);
mmStructBaseline = addVidFrame(mmStruct,1:nBaselineFrames);
for blFrame = 1 : nBaselineFrames
%     RatTrackGetBaseline(mmStructBaseline.frames(blFrame), mmStructBaseline.width, mmStructBaseline.height, blFrame, mmStructBaseline.times(blFrame))
    blFrames = read(vidObj
end
RatTrackData.meanFrame = mean(blFrames,4);

% step 2: process each frame
disp('Processing frames...');
RatTrackData.currentFrameCount = 1;
RatTrackData.iFrame = nan(nFrames,1);
RatTrackData.timestamp = nan(nFrames,1);
RatTrackData.LEDx = nan(nFrames,1);
RatTrackData.LEDy = nan(nFrames,1);
RatTrackData.LEDphiB = nan(nFrames,1);
RatTrackData.LEDphiH = nan(nFrames,1);

% mmread(fn, frameRange, timeRange, disableVideo, disableAudio, 'ProcessRatFrame', trySeeking, useFFGRAB);
fprintf('\n')
t0 = clock;
nIter = 0;
for f = frameRange
    mmStructRat = addVidFrame(mmStruct,f);
    ProcessRatFrame(mmStructRat.frames, mmStructRat.width, mmStructRat.height, mmStructRat.frameList, mmStructRat.times)
    nIter = nIter+1;
    if mod(nIter,10)==0
        fprintf('.')
    end
    if mod(nIter,100)==0
        fprintf('\n')
        t1 = clock;
        elapsed=etime(t1,t0);
        tPer = elapsed/nIter;
        remaining = tPer*(nIter-length(frameRange));
        fprintf('%.0f%% complete, %.1fs elapsed, %.1fs remain\n',nIter/length(frameRange)*100,elapsed,remaining)
    end
end

if useCores>1
    evalin('base','matlabpool close')
end