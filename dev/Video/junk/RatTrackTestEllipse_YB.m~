function [phiB0,phiH0] = RatTrackTestEllipse_YB(im, x0, y0)

global RatTrackParms

% phi = RatTrackTestEllipse(im, x0, y0)
nOrientationsB = 12;
nOrientationsH = 8;

phiB = linspace(-1,1,nOrientationsB);
phiH = linspace(1/2,3/2,nOrientationsH);
% In units of pi.

% s = nan(1,1,nOrientationsB,nOrientationsH);

% phiLB = [-pi pi/2];
% phiUB = [pi 3*pi/2];

[m,n] = size(im);
[X,Y] = meshgrid(1:n, 1:m);

rB = 20;
rH = 12;

[ThetaHmat,PhiBmat] = meshgrid(phiH,phiB);
% PhiBmat is a matrix of body-phi values (in units of pi)
% ThetaHmat is a matrix of head-angle values (in units of pi)
PhiHmat = PhiBmat+ThetaHmat;
% PhiHmat is a matrix of head-phi values, summing body-phi and head-angle
% (in units of pi)

% Focus of circle B
fBx = x0 + 2*rB * cos(PhiBmat*pi);
fBy = y0 + 2*rB * sin(PhiBmat*pi);
% Focus of circle H
fHx = x0 + 2*rH * cos(PhiHmat*pi);
fHy = y0 + 2*rH * sin(PhiHmat*pi);

dB = squared_dist(X,Y,fBx,fBy);
dH = squared_dist(X,Y,fHx,fHy);

T = (double(im)-RatTrackParms.ratColor);
rat = T>0;
rat4D = repmat(rat,[1 1 nOrientationsB nOrientationsH]);

testCircleB = dB<=(rB.^2);
testCircleH = dH<=(rH.^2);

totalB = sum(sum(testCircleB,1),2);
totalH = sum(sum(testCircleH,1),2);

% rat3D = reshape(rat4D,[m n nOrientationsB*nOrientationsH]);
% testCh3D = reshape(testCircleB,[m n nOrientationsB*nOrientationsH]);
% testCb3D = reshape(testCircleH,[m n nOrientationsB*nOrientationsH]);

% % Pre-allocate overlapB3D and overlapH3D for speed.
% overlapB3D = zeros(m,n,nOrientationsB*nOrientationsH);
% overlapH3D = zeros(m,n,nOrientationsB*nOrientationsH);
% for id = 1 : nOrientationsB*nOrientationsH
% parfor id = 1 : nOrientationsB*nOrientationsH
%     overlapB3D(:,:,id) = rat3D(:,:,id)&testCh3D(:,:,id);
%     overlapH3D(:,:,id) = rat3D(:,:,id)&testCb3D(:,:,id);
% end
overlapB = rat4D&testCircleB;
overlapH = rat4D&testCircleH;

% overlapB = reshape(overlapB3D,[m n nOrientationsB nOrientationsH]);
% pOverlapB = sum(sum(overlapB,1),2);
pOverlapB = sum(sum(overlapB,1),2);
nonOverlapB = totalB - pOverlapB;
% s = abs(T);
sB = nonOverlapB./totalB;

% overlapH = reshape(overlapH3D,[m n nOrientationsB nOrientationsH]);
pOverlapH = sum(sum(overlapH,1),2);
nonOverlapH = totalH - pOverlapH;
% s = abs(T);
sH = nonOverlapH./totalB;

s = sB+sH;

s = squeeze(s);

% for iPhi = 1:nOrientationsB
% 	for jPhi = 1:nOrientationsH
% 		s(iPhi,jPhi) = RatTrackTestTwoEllipse(im, X, Y, x0, y0, phiB(iPhi), phiH(jPhi), RatTrackParms.debug); % show ellipses.
% 	end
% end

[~,mPhi] = min(s(:));
nPhi = ceil(mPhi/nOrientationsB);
phiB0_mult = phiB(rem(mPhi, nOrientationsB));
phiH0_mult = phiH(nPhi);
idPhiB = phiB0_mult == phiB;
idPhiH = phiH0_mult == phiH;
phiH0 = (phiB0_mult+phiH0_mult)*pi;
phiB0 = phiB0_mult*pi;

% OPTIONS = optimset('algorithm','interior-point','display','off');
% phis0 = [0 3*pi/4];
% phis = fmincon(@(phis) error_func(im, X, Y, x0, y0, phis, RatTrackParms.debug),phis0,[],[],[],[],phiLB,phiUB,[],OPTIONS);
% phiB0 = phis(1);
% phiB1 = phis(2);

if RatTrackParms.debug
    bw1 = squeeze(testCircleB(:,:,idPhiB,idPhiH));
    bw2 = squeeze(testCircleH(:,:,idPhiB,idPhiH));
    ShowRatMask(im, imadd(bw1,bw2), s(mPhi));
end

function Dsq = squared_dist(X,Y,Fx,Fy)
% Finds squared distance from (Fx,Fy) to (X4D,Y4D).
m = size(X,1);
n = size(Y,2);
p = size(Fx,1);
q = size(Fy,2);

X = reshape(X,[m n 1 1]);
Fx = reshape(Fx,[1 1 p q]);
Y = reshape(Y,[m n 1 1]);
Fy = reshape(Fy,[1 1 p q]);

X = repmat(X,[1 1 p q]);
Y = repmat(Y,[1 1 p q]);
Fx = repmat(Fx,[m n 1 1]);
Fy = repmat(Fy,[m n 1 1]);

DevX = X-Fx;
DevY = Y-Fy;

Dsq = (DevX.*DevX)+(DevY.*DevY);

% function s = RatTrackTestTwoEllipse(im, X, Y, x0, y0, phi0, phi1, flagSHOW)
% 
% %BODY
% r = 20;
% x1 = x0 + 2*r * cos(phi0);
% y1 = y0 + 2*r  * sin(phi0);
% [s1,bw1] = TestCircle(im, X, Y, r, x1, y1);
% 
% %HEAD
% r = 12;
% x1 = x0 + 2*r  * cos(phi0+phi1);
% y1 = y0 + 2*r  * sin(phi0+phi1);
% [s2,bw2] = TestCircle(im, X, Y, r, x1, y1);
% 
% s = s1 + s2;
% 
% if flagSHOW
% 	ShowRatMask(im, imadd(bw1,bw2), s);
% end
% 
% % function s = RatTrackTestOneEllipse(im, X, Y, x0, y0, phi0)
% % 
% % % s = RatTrackTestEllipse(im, phi)
% % 
% % majorAxis = 50;
% % eccentricity = 1.2;
% % 
% % focus1x = x0 - eccentricity/2.5*majorAxis*cos(phi0); 
% % focus1y = y0 - eccentricity/2.5*majorAxis*sin(phi0); 
% % focus2x = x0 + eccentricity*majorAxis*cos(phi0);
% % focus2y = y0 + eccentricity*majorAxis*sin(phi0);
% % 
% % s = TestEllipse(im, X, Y, majorAxis,  focus1x, focus1y, focus2x, focus2y);
% 
% function [s,bw] = TestCircle(im, X, Y, r, focus1x, focus1y)
% 
% global RatTrackParms
% 
% d = (focus1x-X).^2+(focus1y-Y).^2;
% bw = d < (r*r);
% % Each pixel has luminance (im-ratColor) relative to ratColor.
% T = (double(im)-RatTrackParms.ratColor);
% rat = T>0;
% total = sum(bw(:));
% overlap = rat&bw;
% overlap = sum(overlap(:));
% nonOverlap = total - overlap;
% 
% % s = abs(T);
% s = nonOverlap/total;
% 
% % function [s,r] = TestEllipse(im, X, Y, majorAxis, focus1x, focus1y, focus2x, focus2y)
% % 
% % global RatTrackParms
% % 
% % d = sqrt((focus1x-X).^2+(focus1y-Y).^2) + sqrt((focus2x-X).^2+(focus2y-Y).^2);
% % r = d < (2*majorAxis);
% % s = mean(abs(double(im(r))-RatTrackParms.ratColor));

function ShowRatMask(im, r, s)

figure(1); clf
RGB_label = label2rgb(r, @jet, 'k');
imshow(imadd(repmat(im,[1 1 3]),RGB_label));
hold on;
title(num2str(s));
drawnow
return


