function [gmobj,mus,Sigmas,taus,h] = gmmfit(x,k,varargin)
% Wrapper for fitting mixture of gaussians, sorting components by mean.
% [gmobj,mus,Sigmas,taus,h] = gmmfit(x,k)
% where         gmobj is a gaussian mixture distribution object,
%               mus is a k x d matrix of k component means for d dimensions
%               Sigmas is a covariance matrix
%               taus is a 1 x k vector of mixture coefficients
%               h is a d x 1 vector of logicals specifying whether the
%                   observed distribution of x's violates a
%                   Kolmogorov-Smirnov test that they were generated by the
%                   mixture of gaussians estimated by gmmfit.
% and
%               x is a n x d matrix of observations
%               k is the number of components to fit.
% OPTIONAL:
% ~~~~~~~~
% Regularize    add a regularization constant to covariance matrix (default eps)
% CovType       type of covariance matrix (default full)
% SharedCov     shared covariance between components (default false)
% Start         method of starting values (default randSample)
% Replicates    number of times to repeat process (default 50)
% Options       statset options structure (default is gmdistribution.fit default)
% Sorting       dimensions to sort on (default is 1 to d, in order, ascending)

if size(x,1)==1 & any(size(x)>1);
    x = x';
end 
d = size(x,2);
Regularize = eps;
Options = statset('display','off','maxIter',10000,'tolFun',1e-6);
CovType = 'full';
SharedCov = false;
Start = 'randSample';
Replicates = 50;
Sorting = [1:d];
process_varargin(varargin);

idnan = any(isnan(x),2);
if any(idnan)
    warning('Rows of X with missing data will not be used.');
end
x(idnan,:) = [];

gmm = gmdistribution.fit(x,k,'Regularize',Regularize,'Options',Options,'CovType',CovType,'SharedCov',SharedCov,'Start',Start,'Replicates',Replicates);
if nargout<1
    disp(gmm)
end

mus = gmm.mu;
[mus,idSort] = sortrows(mus,Sorting);

Sigmas = gmm.Sigma;
if size(Sigmas,3)==k
    % d x d x k or 1 x d x k
    Sigmas = Sigmas(:,:,idSort);
end

taus = gmm.PComponents;
taus = taus(idSort);

S.mu = mus;
S.Sigma = Sigmas;
S.PComponents = taus;
gmobj = gmdistribution.fit(x,k,'Regularize',Regularize,'Options',Options,'CovType',CovType,'SharedCov',SharedCov,'Start',S,'Replicates',1);

% if nargout>4
    if d>1
        warning('Performing test on marginalized dimensions.')
        h = nan(d,1);
        dims = 1:d;
        for iD=1:d
            x0 = x;
            x0(:,dims~=iD) = repmat(nanmean(x(:,dims~=iD)),[size(x0,1) 1]);
            c = gmmcdf(gmobj,x0);
            h(iD) = kstest(x0(:,iD),[x0(:,iD) sum(c,2)]);
        end
    else
        c = gmmcdf(gmobj,x);
        h = kstest(x,[x sum(c,2)]);
    end
% end